import { timer } from "rxjs";
import { Config } from "src/assets/Config";
import { FaceTecIDScanResult, FaceTecSessionResult } from "src/assets/core-sdk/FaceTecSDK.js/FaceTecPublicApi";
import { FaceTecSDK } from "src/assets/core-sdk/FaceTecSDK.js/FaceTecSDK";
import { ReconocimientoFacialFacetecDto } from "../modelos/reconocimiento-facial-facetec";
import { ProfilePhotoIDMatchProcessor } from "../processors/ProfilePhotoIDMatchProcessor";
import { FaceTecStrings } from "./FaceTecStrings.es";
import { SampleAppUtilities } from "./SampleAppUtilities";

export const AngularSampleApp = (function () {
  let latestEnrollmentIdentifier = "";
  let latestSessionResult: FaceTecSessionResult | null = null;
  let latestIDScanResult: FaceTecIDScanResult | null = null;
  let latestProcessor: ProfilePhotoIDMatchProcessor;
  let image2dBase64: string;
  let minMatchLevelFoto: number;
  let successEnrollment: boolean;
  let resultComparePhoto = false;
  let finishProcessing = false;

  // Wait for onload to be complete before attempting to access the Browser SDK.
  function initializeFacetec() {
    // Set a the directory path for other FaceTec Browser SDK Resources.
    FaceTecSDK.setResourceDirectory("/assets/core-sdk/FaceTecSDK.js/resources");

    // Set the directory path for required FaceTec Browser SDK images.
    FaceTecSDK.setImagesDirectory("/assets/core-sdk/FaceTec_images");

    // Initialize FaceTec Browser SDK and configure the UI features.
    /* FaceTecSDK.initializeInDevelopmentMode(Config.DeviceKeyIdentifier, Config.PublicFaceScanEncryptionKey, function (initializedSuccessfully: boolean) {
      if (initializedSuccessfully) {
        SampleAppUtilities.enableControlButtons();
      }
      const statusText = getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus());
      SampleAppUtilities.displayStatus(statusText);
    }); */

    const statusTemporal = FaceTecSDK.getStatus();

    if (statusTemporal !== 1) {
      Config.initializeFromAutogeneratedConfig(
        FaceTecSDK,
        function (initializedSuccessfully: boolean) {
          if (initializedSuccessfully) {
            SampleAppUtilities.enableControlButtons();
            FaceTecSDK.configureLocalization(FaceTecStrings);
            // Set the sound files that are to be used for Vocal Guidance.
            SampleAppUtilities.setVocalGuidanceSoundFiles();

            /* AdditionalScreens.setServerUpgradeStyling(
              document.getElementById("controls")!,
              exitAdditionalScreen
            ); */

            //SampleAppUtilities.enableControlButtons();
          }
          const statusText = getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus());
          SampleAppUtilities.displayStatus(statusText);
        }
      );
    } else {
      SampleAppUtilities.enableControlButtons();
      const statusText = getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus());
      SampleAppUtilities.displayStatus(statusText);
    }



    SampleAppUtilities.formatUIForDevice();
  }

  function getFriendlyDescriptionForFaceTecSDKStatus(status: any) {
    let statusText = "";
    switch (status) {
      case 0: {
        statusText = "Nunca inicializado";
        break;
      }
      case 1: {
        statusText = "Inicializado";
        break;
      }
      case 2: {
        statusText = "Error de conexión";
        break;
      }
      case 3: {
        statusText = "La llave es inválida";
        break;
      }
      case 4: {
        statusText = "Versión obsoleta";
        break;
      }
      case 5: {
        statusText = "Dispositivo no soportado";
        break;
      }
      case 6: {
        statusText = "El dispositivo está en orientación de pantalla horizontal. El SDK del navegador FaceTec solo se puede usar en orientación de pantalla vertical";
        break;
      }
      case 7: {
        statusText = "Dispositivo bloqueado";
        break;
      }
      case 8: {
        statusText = "La llave ha expirado";
        break;
      }
      case 9: {
        statusText = "Se canceló la sesión, se abrió FaceTec Browser SDK en un IFrame sin permiso.";
        break;
      }
      case 10: {
        statusText = "Todavía se están cargando recursos";
        break;
      }
      case 11: {
        statusText = "No se pudo cargar los recursos";
        break;
      }
      default: {
        statusText = "error";
        break;
      }
    }
    return statusText;
  }


  function onComparePict(datos: ReconocimientoFacialFacetecDto) {
    finishProcessing = false;
    resultComparePhoto = false;
    this.image2dBase64 = datos.imagen2dBase64;
    this.minMatchLevelFoto = datos.nivelMinimoComparacionFoto;

    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    // Get a Session Token from the FaceTec SDK, then start the Enrollment.
    getSessionToken(function (sessionToken) {
      latestEnrollmentIdentifier = datos.prefijoIdentificadorUnico + SampleAppUtilities.generateUUId();
      latestProcessor = new ProfilePhotoIDMatchProcessor(sessionToken as string, AngularSampleApp as any);
    });

  }



  // Show the final result and transition back into the main interface.
  function onComplete() {
    SampleAppUtilities.showMainUI();

    if (!latestProcessor.isSuccess()) {
      // Reset the enrollment identifier.
      latestEnrollmentIdentifier = "";

      // Show early exit message to screen.  If this occurs, please check logs.
      SampleAppUtilities.displayStatus("La sesión se cerró antes de tiempo, consulte los registros para obtener más detalles.");

      finishProcessing = true;
      return;
    }

    // Show successful message to screen
    SampleAppUtilities.displayStatus("Éxito");
  }

  function onCompletePictureCompare(success: boolean) {
    console.log("the value in onCompletePictureCompare for success is " + success);
    resultComparePhoto = success;

    finishProcessing = true;
  }



  // Get the Session Token from the server
  function getSessionToken(sessionTokenCallback: (sessionToken?: string) => void) {
    const XHR = new XMLHttpRequest();
    XHR.open("GET", Config.BaseURL + "/session-token");
    XHR.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
    XHR.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""));
    XHR.onreadystatechange = function () {
      if (this.readyState === XMLHttpRequest.DONE) {
        let sessionToken = "";
        try {
          // Attempt to get the sessionToken from the response object.
          sessionToken = JSON.parse(this.responseText).sessionToken;
          // Something went wrong in parsing the response. Return an error.
          if (typeof sessionToken !== "string") {
            onServerSessionTokenError();
            return;
          }
        }
        catch {
          // Something went wrong in parsing the response. Return an error.
          console.log('onServerSessionTokenError');
          onServerSessionTokenError();
          return;
        }
        sessionTokenCallback(sessionToken);
      }
    };

    XHR.onerror = function () {
      onServerSessionTokenError();
    };
    XHR.send();
  }



  function onServerSessionTokenError() {
    SampleAppUtilities.handleErrorGettingServerSessionToken();
  }

  //
  // DEVELOPER NOTE:  This is a convenience function for demonstration purposes only so the Sample App can have access to the latest session results.
  // In your code, you may not even want or need to do this.
  //
  function setLatestSessionResult(sessionResult: FaceTecSessionResult) {
    latestSessionResult = sessionResult;
  }

  function setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
    latestIDScanResult = idScanResult;
  }

  function getLatestEnrollmentIdentifier() {
    return latestEnrollmentIdentifier;
  }

  function setLatestServerResult(responseJSON: any) {
  }

  function clearLatestEnrollmentIdentifier(responseJSON: any) {
    latestEnrollmentIdentifier = "";
  }

  function getFinishProcessing(): boolean {
    return finishProcessing;
  }

  function getResultComparePhoto(): boolean {
    return resultComparePhoto;
  }


  return {
    initializeFacetec,
    onComparePict,
    onComplete,
    onCompletePictureCompare,
    setLatestSessionResult,
    setLatestIDScanResult,
    getLatestEnrollmentIdentifier,
    setLatestServerResult,
    clearLatestEnrollmentIdentifier,
    getFinishProcessing,
    getResultComparePhoto
  };

})();